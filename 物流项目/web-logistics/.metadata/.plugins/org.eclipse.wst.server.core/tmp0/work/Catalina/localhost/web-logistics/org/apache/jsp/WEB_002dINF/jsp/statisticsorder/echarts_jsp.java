/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.82
 * Generated at: 2019-05-23 06:55:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.statisticsorder;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class echarts_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("    \r\n");
      out.write("    <title>echarts示例演示</title>\r\n");
      out.write("    \r\n");
      out.write("\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"expires\" content=\"0\">    \r\n");
      out.write("\t<meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\r\n");
      out.write("\t<meta http-equiv=\"description\" content=\"This is my page\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("\t-->\r\n");
      out.write("\r\n");
      out.write("  <script type=\"text/javascript\" src=\"js/echarts.min.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("  <script type=\"text/javascript\" src=\"easyui/jquery.min.js\"></script></head>\r\n");
      out.write("  <script type=\"text/javascript\" src=\"js/sanjiliandong.js\"></script>\r\n");
      out.write("  <body>\r\n");
      out.write("  <!-- <select id=\"year\"><option>2018</option><option>2019</option><option>2017</option></select>\r\n");
      out.write("   <select id=\"month\"><option>1</option><option>2</option><option>3</option></select> -->\r\n");
      out.write("   \t省 <select id=\"province\" value=\"河南省\"style=\"width:150px;height:30px\"></select> \r\n");
      out.write("\t市<select id=\"city\" value=\"郑州市\"style=\"width:150px;height:30px\"></select>  \r\n");
      out.write("  <!-- 为ECharts准备一个具备大小（宽高）的Dom -->\r\n");
      out.write("    <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    //js定义数组\r\n");
      out.write("     $(function(){\r\n");
      out.write("            //默认显示\r\n");
      out.write("            getData('河南省','郑州市');\r\n");
      out.write("            //月份变化时变化\r\n");
      out.write("            $(\"#province\").change(function(){\r\n");
      out.write("                getData($(\"#province\").find(\"option:selected\").text(),$(\"#city\").find(\"option:selected\").text());\r\n");
      out.write("            });\r\n");
      out.write("            $(\"#city\").change(function(){\r\n");
      out.write("                getData($(\"#province\").find(\"option:selected\").text(),$(\"#city\").find(\"option:selected\").text());\r\n");
      out.write("            });\r\n");
      out.write("          });\r\n");
      out.write("          function getData(province,city){\r\n");
      out.write("\t         \r\n");
      out.write("          //使用ajax得到数据\r\n");
      out.write("\t          $.ajax({\r\n");
      out.write("\t             url:\"orderstatistic/ordercharts.do\",\r\n");
      out.write("\t             type:\"post\",\r\n");
      out.write("\t             data:{province:province,city:city},\r\n");
      out.write("\t             dataType:\"json\",\r\n");
      out.write("\t             async:false,//同步\r\n");
      out.write("\t             success:function(data){\r\n");
      out.write("\t                 var title = [];\r\n");
      out.write("\t                  var ydata = [];\r\n");
      out.write("\t                if(data!=''){\r\n");
      out.write("\t                 for(var i=0;i<data.length;i++){\r\n");
      out.write("\t                    title.push(data[i].order_now_store);\r\n");
      out.write("\t                    //alert(title);\r\n");
      out.write("\t                     ydata.push(data[i].cnt); \r\n");
      out.write("\t                    //alert(ydata);\r\n");
      out.write("\t                 }\r\n");
      out.write("\t                  showData(title,ydata);\r\n");
      out.write("\t                }\r\n");
      out.write("\t             }\r\n");
      out.write("\t          });\r\n");
      out.write("         }\r\n");
      out.write("         function showData(title,ydata){\r\n");
      out.write("         // 基于准备好的dom，初始化echarts实例\r\n");
      out.write("\t\t var myChart = echarts.init(document.getElementById('main'));\r\n");
      out.write("\t\t// 指定图表的配置项和数据\r\n");
      out.write("        var option = {\r\n");
      out.write("            title: {\r\n");
      out.write("                text: '门店订单统计'\r\n");
      out.write("            },\r\n");
      out.write("            tooltip: {},\r\n");
      out.write("            legend: {\r\n");
      out.write("                data:['门店订单']\r\n");
      out.write("            },\r\n");
      out.write("            xAxis: {\r\n");
      out.write("                data: title\r\n");
      out.write("            },\r\n");
      out.write("            yAxis: {},\r\n");
      out.write("            series: [{\r\n");
      out.write("                name: '门店订单',\r\n");
      out.write("                type: 'bar',\r\n");
      out.write("                data: ydata\r\n");
      out.write("            }]\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        // 使用刚指定的配置项和数据显示图表。\r\n");
      out.write("        myChart.setOption(option);\r\n");
      out.write("     }   \r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
